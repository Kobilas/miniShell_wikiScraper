#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <unistd.h>
#include <ctype.h>
#include <signal.h>
#include <string.h>
#include <errno.h>

#define MAXCMDSIZ 512
#define MAXPROC 128

int DEBUG = 0;
int pList[MAXPROC];
int pNum = 0;
int movPipe[2];

void removeWhitespace(char *str){
  if(DEBUG) printf("Removing whitespace\n");
  int i, index;
  for(i = index = 0; str[i]; i++)
    if(!isspace(str[i]) || (i>0 && !isspace(str[i-1]))) str[index++] = str[i];
  str[index] = '\0';
}

int tokCount(const char *str){
  if(DEBUG) printf("Counting tokens\n");
  int count = 1, i, len = strlen(str), spaceFlag = 0;
  for(i = 0; i < len; i++){
    if(str[i] == ' ') spaceFlag = 1;
    else if(str[i] != ' ' && spaceFlag){
      count++;
      spaceFlag = 0;
    }
  }
  return count;
}

int main(int argc, char* argv[]){
  if(argc > 2){
    fprintf(stderr, "ERROR: Too many arguments\n");
    return -1;
  }
  int opt;
  while((opt = getopt(argc, argv, "")) != -1){
    switch(opt){
      case '?':
        fprintf(stderr, "ERROR: Invalid argument\n");
        break;
    }
  }
  char input[MAXCMDSIZ];
  char *path = argv[optind];
  FILE* fp;
  int fileFlag = 0;
  int pid;
  int fd;
  pipe(movPipe);
  if(path == NULL) fp = stdin;
  else{
    if((fp = fopen(path, "r")) == NULL){
      fprintf(stderr, "ERROR: File does not exist or was unable to be opened\n");
      return 1;
    }
    fileFlag = 1;
  }
  do{
    int backFlag = 0;
    if(!fileFlag) printf("minishel> ");
    if(fileFlag && fgets(input, MAXCMDSIZ, fp) == NULL) break;
    else if(!fileFlag) fgets(input, MAXCMDSIZ, fp);
    if(!strcmp(input, "\n")) continue;
    if(fileFlag) printf("%s", input);
    if(DEBUG) printf("Input: %s", input);
    removeWhitespace(input);
    if(DEBUG) printf("Done removing whitespace! New input: %s", input);
    int numTokens = tokCount(input);
    if(DEBUG) printf("Done counting tokens! Number of tokens: %d\n", numTokens);
    if(DEBUG) printf("input before strtok loop: %s", input);
    char *tokens[numTokens+1];
    tokens[0] = strtok(input, " \n");
    tokens[numTokens] = NULL;
    int i;
    for(i = 1; i < numTokens; i++) tokens[i] = strtok(NULL, " \n");
    if(DEBUG){
      printf("Tokens: ");
      for(i = 0; i < numTokens; i++) printf("%s", tokens[i]);
      printf("\n");
    }
    if(!strcmp(tokens[0], "quit") || !strcmp(tokens[0], "quit&")){
      if(DEBUG) printf("Breaking from loop near the top\n");
      break;
    }
    if((numTokens == 1) && (!strcmp(tokens[0], "barrier") || !strcmp(tokens[0], "barrier&"))){
      while(pNum > 0) if(kill(pList[pNum], 0) == 0) waitpid(pList[pNum--], NULL, 0);
    }
    else{
      if(tokens[numTokens-1][strlen(tokens[numTokens-1])-1] == '&'){
        if(DEBUG) printf("Found an ampersand (&)\n");
        backFlag = 1;
        tokens[numTokens-1][strlen(tokens[numTokens-1])-1] = '\0';
      }
      pid = fork();
      if(pid == 0){ //child
        if(DEBUG) printf("Executing command as child\n");
        for(i = 0; i < numTokens; i++){
          if((!strcmp(tokens[i], ">")) && ((i + 1) < numTokens)){
            close(1);
            if(DEBUG) fprintf(stderr, "REDIRECTION located, creating/truncating file\n");
            if((fd = open(tokens[i+1], O_CREAT | O_WRONLY | O_TRUNC, 0744)) == -1){
                fprintf(stderr, "ERROR: Opening or creating file failed\n");
                return 1;
            }
            if(DEBUG) fprintf(stderr, "file descriptor %d\n", fd);
            tokens[i] = NULL;
            break;
          }
        }
        if(DEBUG){
          fprintf(stderr, "Tokens before execution: ");
          int j;
          for(j = 0; j < numTokens; j++) fprintf(stderr, "%s ", tokens[j]);
          fprintf(stderr, "\n");
        }
        int ret = execvp(tokens[0], tokens);
        if(backFlag) printf("minishel> ");
        if(ret == -1)
          fprintf(stderr, "ERROR: Command does not exist or cannot be executed\n");
        if(DEBUG) printf("Done executing command!\n");
        close(fd);
        return 0;
      }
      else{ //parent
        pList[++pNum] = pid;
        if(!backFlag) waitpid(pid, NULL, 0);
      }
    }
  }while(1);
  return 0;
}
